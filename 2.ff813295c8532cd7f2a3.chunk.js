webpackJsonp([2],{878:function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0}),n.d(o,"FormModule",function(){return x});var t=n(20),c=n(3),l=n(77),d=n(918),r=n(132),a=n(207),i=n(888),u=n(890),b=n(889),p=this&&this.__decorate||function(e,o,n,t){var c,l=arguments.length,d=l<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,o,n,t);else for(var r=e.length-1;r>=0;r--)(c=e[r])&&(d=(l<3?c(d):l>3?c(o,n,d):c(o,n))||d);return l>3&&d&&Object.defineProperty(o,n,d),d},x=function(){function FormModule(){}return FormModule=p([Object(c.M)({declarations:[i.a,u.a,b.a],imports:[t.b,l.a,d.a,r.a,a.a],exports:[i.a],providers:[]})],FormModule)}()},888:function(e,o,n){"use strict";n.d(o,"a",function(){return d});var t=n(3),c=this&&this.__decorate||function(e,o,n,t){var c,l=arguments.length,d=l<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,o,n,t);else for(var r=e.length-1;r>=0;r--)(c=e[r])&&(d=(l<3?c(d):l>3?c(o,n,d):c(o,n))||d);return l>3&&d&&Object.defineProperty(o,n,d),d},l=this&&this.__metadata||function(e,o){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,o)},d=function(){function ExFormMainComponent(){}return ExFormMainComponent.prototype.ngOnInit=function(){},ExFormMainComponent=c([Object(t.o)({selector:"ex-form-main",template:n(919),styles:[n(920)]}),l("design:paramtypes",[])],ExFormMainComponent)}()},889:function(e,o,n){"use strict";n.d(o,"a",function(){return d});var t=n(3),c=n(921),l=this&&this.__decorate||function(e,o,n,t){var c,l=arguments.length,d=l<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,o,n,t);else for(var r=e.length-1;r>=0;r--)(c=e[r])&&(d=(l<3?c(d):l>3?c(o,n,d):c(o,n))||d);return l>3&&d&&Object.defineProperty(o,n,d),d},d=function(){function ExCheckboxComponent(){this.code=c.a,this.page={previous:{name:"Radio 单选框",link:"/form/radio"},next:{name:"Input 输入框",link:"/form/checkbox"}}}return ExCheckboxComponent.prototype.ngOnInit=function(){},ExCheckboxComponent=l([Object(t.o)({selector:"ex-checkbox",template:n(922),styles:[n(923)]})],ExCheckboxComponent)}()},890:function(e,o,n){"use strict";n.d(o,"a",function(){return d});var t=n(3),c=n(924),l=this&&this.__decorate||function(e,o,n,t){var c,l=arguments.length,d=l<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,o,n,t);else for(var r=e.length-1;r>=0;r--)(c=e[r])&&(d=(l<3?c(d):l>3?c(o,n,d):c(o,n))||d);return l>3&&d&&Object.defineProperty(o,n,d),d},d=function(){function ExRadioComponent(){this.code=c.a,this.page={previous:{name:"Button 按钮",link:"/form/radio"},next:{name:"Checkbox 多选框",link:"/form/checkbox"}}}return ExRadioComponent.prototype.ngOnInit=function(){},ExRadioComponent=l([Object(t.o)({selector:"ex-radio",template:n(925),styles:[n(926)]})],ExRadioComponent)}()},918:function(e,o,n){"use strict";n.d(o,"a",function(){return u});var t=n(3),c=n(49),l=n(888),d=n(889),r=n(890),a=this&&this.__decorate||function(e,o,n,t){var c,l=arguments.length,d=l<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,o,n,t);else for(var r=e.length-1;r>=0;r--)(c=e[r])&&(d=(l<3?c(d):l>3?c(o,n,d):c(o,n))||d);return l>3&&d&&Object.defineProperty(o,n,d),d},i=[{path:"",component:l.a,children:[{path:"radio",component:r.a},{path:"checkbox",component:d.a}]}],u=function(){function FormRoutingModule(){}return FormRoutingModule=a([Object(t.M)({imports:[c.c.forChild(i)],exports:[c.c]})],FormRoutingModule)}()},919:function(e,o){e.exports="<router-outlet></router-outlet>\n"},920:function(e,o){e.exports=""},921:function(e,o,n){"use strict";o.a=["\n\x3c!-- 'checked' 为 true 或 false --\x3e\n<el-checkbox [(model)]=\"checked\" >备选项</el-checkbox>\n\n",'\n\n<el-checkbox [model]="checked1" [disabled]="true">备选项1</el-checkbox>\n<el-checkbox [model]="checked2" [disabled]="true">备选项2</el-checkbox>\n\n','\n\n\x3c!--当组件中无值时，label 属性的值也会用于显示--\x3e\n<el-checkbox-group [model]="[\'复选框 B\', \'选中且禁用\']">\n  <el-checkbox label="复选框 A"></el-checkbox>\n  <el-checkbox label="复选框 B">复选框 F</el-checkbox>\n  <el-checkbox label="复选框 C"></el-checkbox>\n  <el-checkbox label="禁用" [disabled]="true"></el-checkbox>\n  <el-checkbox label="选中且禁用" [disabled]="true"></el-checkbox>\n</el-checkbox-group>\n\n','\n\x3c!--min 与 [min] 并不是等价的，具体请参见 Angular 官方文档--\x3e\n<el-checkbox-group [model]="[\'Java\', \'TypeScript\']" [min]="1" max="2">\n  <el-checkbox label="Java"></el-checkbox>\n  <el-checkbox label=".NET">复选框 F</el-checkbox>\n  <el-checkbox label="C++"></el-checkbox>\n  <el-checkbox label="JavaScript" [disabled]="true"></el-checkbox>\n  <el-checkbox label="TypeScript" [disabled]="true"></el-checkbox>\n</el-checkbox-group>\n\n',"\n<div style=\"margin: 15px 0;\"></div>\n<el-checkbox-group [model]=\"['Java', 'TypeScript', 'Swift']\">\n  <el-checkbox-button *ngFor=\"let city of ['Hello', 'TypeScript', 'CSS']\"\n    [label]=\"city\"></el-checkbox-button>\n</el-checkbox-group>\n\n<div style=\"margin: 15px 0;\"></div>\n<el-checkbox-group [model]=\"['Hegel', 'Aristotle', 'Dewey']\" size=\"small\">\n  <el-checkbox-button *ngFor=\"let man of ['Hegel', 'Aristotle', 'Dewey']\"\n    [label]=\"man\" [disabled]=\"man === 'Aristotle'\">{{man}}</el-checkbox-button>\n</el-checkbox-group>\n"]},922:function(e,o){e.exports='<h2>Checkbox 多选框</h2>\n<p>一组备选项中进行多选</p>\n\n<h3>基础用法</h3>\n<p>单独使用可以表示两种状态之间的切换，写在标签中的内容为 checkbox 按钮后的介绍。</p>\n<ex-demo link="2" [code]="code[0]" notes="在组件中定义 <code>model</code> 绑定变量，\n单一使用组件时，默认绑定变量的值会是 <code>Boolean</code>，选中为 <code>true</code>">\n</ex-demo>\n\n<h3>禁用状态</h3>\n<p>多选框不可用状态。</p>\n<ex-demo link="2" [code]="code[1]" notes="设置 <code>disabled</code> 属性即可">\n</ex-demo>\n\n<h3>多选框组</h3>\n<p>适用于多个勾选框绑定到同一个数组的情景，通过是否勾选来表示这一组选项中选中的项。</p>\n<ex-demo link="2" [code]="code[2]" notes="<code>label</code> 与数组中的元素值相对应，\n如果存在指定的值则为选中状态，否则为不选中。">\n</ex-demo>\n\n<h3>可选项目数量的限制</h3>\n<p>使用 <code>min</code> 和 <code>max</code> 属性能够限制可以被勾选的项目的数量。</p>\n<ex-demo link="2" [code]="code[3]">\n</ex-demo>\n\n<h3>按钮样式</h3>\n<p>按钮样式的多选组合。</p>\n<ex-demo link="2" [code]="code[4]" notes="组件还提供了 <code>size</code> 属性，\n支持 <code>large</code> 和 <code>small</code> 两种。">\n</ex-demo>\n\n<ex-document doc="checkbox"></ex-document>\n<ex-document doc="checkbox-group"></ex-document>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n'},923:function(e,o){e.exports=""},924:function(e,o,n){"use strict";o.a=['\n\x3c!--绑定的 model 与 label 值相同时就会被选中--\x3e\n<el-radio class="radio" [(model)]="radio" label="备选1">备选项</el-radio>\n\n<el-radio class="radio" [(model)]="radio" label="备选2"></el-radio>\n\n<el-radio class="radio" [(model)]="radio" label="备选3">备选3</el-radio>\n\n','\n\x3c!--你可以拆分 model 达到不同的用途：--\x3e\n\x3c!--单独使用 \'[]\' 来标记输入组件的值，甚至可以不声明变量--\x3e\n\x3c!--单独使用 \'(modelChange)\' 来获取组件返回的变化--\x3e\n<el-radio [disabled]="true" [model]="\'element\'" label="element">备选项</el-radio>\n\n<el-radio [disabled]="true" [(model)]="element2" label="element">备选项</el-radio>\n\n','\n<el-radio-group [model]="\'3\'">\n  <el-radio label="3">备选项</el-radio>\n  <el-radio label="6">备选项</el-radio>\n  <el-radio label="9">备选项</el-radio>\n</el-radio-group>\n','\n<el-radio-group [model]="\'上海\'">\n  <el-radio-button label="上海"></el-radio-button>\n  <el-radio-button label="北京"></el-radio-button>\n  <el-radio-button label="广州"></el-radio-button>\n  <el-radio-button label="深圳"></el-radio-button>\n</el-radio-group>\n<div style="margin: 15px 0;"></div>\n\n<el-radio-group [model]="\'Angular\'">\n  <el-radio-button label="Angular"></el-radio-button>\n  <el-radio-button label="React"></el-radio-button>\n  <el-radio-button label="Bootstrap" :disabled="true"></el-radio-button>\n  <el-radio-button label="Vue"></el-radio-button>\n</el-radio-group>\n<div style="margin: 15px 0;"></div>\n\n<el-radio-group [model]="\'北京\'" :disabled="true">\n  <el-radio-button label="上海"></el-radio-button>\n  <el-radio-button label="北京"></el-radio-button>\n  <el-radio-button label="广州"></el-radio-button>\n  <el-radio-button label="深圳"></el-radio-button>\n</el-radio-group>\n']},925:function(e,o){e.exports='<h2>Radio 单选框</h2>\n<p>在一组备选项中进行单选</p>\n\n<h3>基础用法</h3>\n<p>由于选项默认可见，不宜过多，若选项过多，建议使用 Select 选择器。</p>\n<ex-demo link="2" [code]="code[0]" notes="要使用 Radio 组件，只需要设置 <code>[(model)]</code>绑定变量。\n如果组件中未包含内容，则会优先显示 <code>[label]</code> 中的内容。">\n</ex-demo>\n\n<h3>禁用状态</h3>\n<p>单选框不可用的状态。</p>\n<ex-demo link="2" [code]="code[1]" notes="选中的条件是绑定的变量值等于`label`中的值。只要在<code>el-radio</code>元素中设置\n<code>disabled</code>属性即可，它接受一个<code>boolean</code>，<code>true</code>为禁用。">\n</ex-demo>\n\n<h3>单选框组</h3>\n<p>适用于在多个互斥的选项中选择的场景</p>\n<ex-demo link="2" [code]="code[2]" notes="在 <code>el-radio-group</code> 中绑定 <code>model</code>，\n在el-radio中设置好label即可，无需再给每一个el-radio绑定变量 (会被忽略)。">\n</ex-demo>\n\n<h3>按钮样式</h3>\n<p>按钮样式的单选组合。</p>\n<ex-demo link="2" [code]="code[3]" notes="只需要把 <code>el-radio</code> 元素换成\n<code>el-radio-button</code> 元素即可，此组件还提供了 <code>size</code> 属性，支持\n<code>large</code> 和 <code>small</code> 两种">\n</ex-demo>\n\n<ex-document doc="radio"></ex-document>\n<ex-document doc="radio-group"></ex-document>\n<ex-document doc="radio-button"></ex-document>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n'},926:function(e,o){e.exports=""}});