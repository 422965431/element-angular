webpackJsonp([1],{867:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),t.d(e,"BasicModule",function(){return g});var i=t(20),o=t(3),c=t(76),l=t(890),d=t(207),r=t(208),p=t(872),s=t(873),a=t(874),v=t(875),u=this&&this.__decorate||function(n,e,t,i){var o,c=arguments.length,l=c<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(n,e,t,i);else for(var d=n.length-1;d>=0;d--)(o=n[d])&&(l=(c<3?o(l):c>3?o(e,t,l):o(e,t))||l);return c>3&&l&&Object.defineProperty(e,t,l),l},g=function(){function BasicModule(){}return BasicModule=u([Object(o.M)({declarations:[p.a,s.a,a.a,v.a],imports:[i.b,c.a,l.a,d.a,r.a],exports:[p.a],providers:[]})],BasicModule)}()},872:function(n,e,t){"use strict";t.d(e,"a",function(){return l});var i=t(3),o=this&&this.__decorate||function(n,e,t,i){var o,c=arguments.length,l=c<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(n,e,t,i);else for(var d=n.length-1;d>=0;d--)(o=n[d])&&(l=(c<3?o(l):c>3?o(e,t,l):o(e,t))||l);return c>3&&l&&Object.defineProperty(e,t,l),l},c=this&&this.__metadata||function(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},l=function(){function ExBasicMainComponent(){}return ExBasicMainComponent.prototype.ngOnInit=function(){},ExBasicMainComponent=o([Object(i.o)({selector:"ex-basic-main",template:t(891),styles:[t(892)]}),c("design:paramtypes",[])],ExBasicMainComponent)}()},873:function(n,e,t){"use strict";t.d(e,"a",function(){return c});var i=t(3),o=this&&this.__decorate||function(n,e,t,i){var o,c=arguments.length,l=c<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(n,e,t,i);else for(var d=n.length-1;d>=0;d--)(o=n[d])&&(l=(c<3?o(l):c>3?o(e,t,l):o(e,t))||l);return c>3&&l&&Object.defineProperty(e,t,l),l},c=function(){function ExButtonComponent(){}return ExButtonComponent.prototype.clickHandler=function(n){console.log("click",n)},ExButtonComponent.prototype.ngOnInit=function(){},ExButtonComponent=o([Object(i.o)({selector:"ex-button",template:t(893),styles:[t(894)]})],ExButtonComponent)}()},874:function(n,e,t){"use strict";t.d(e,"a",function(){return c});var i=t(3),o=this&&this.__decorate||function(n,e,t,i){var o,c=arguments.length,l=c<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(n,e,t,i);else for(var d=n.length-1;d>=0;d--)(o=n[d])&&(l=(c<3?o(l):c>3?o(e,t,l):o(e,t))||l);return c>3&&l&&Object.defineProperty(e,t,l),l},c=function(){function ExIconComponent(){}return ExIconComponent.prototype.ngOnInit=function(){},ExIconComponent=o([Object(i.o)({selector:"ex-icon",template:t(895),styles:[t(896)]})],ExIconComponent)}()},875:function(n,e,t){"use strict";t.d(e,"a",function(){return c});var i=t(3),o=this&&this.__decorate||function(n,e,t,i){var o,c=arguments.length,l=c<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(n,e,t,i);else for(var d=n.length-1;d>=0;d--)(o=n[d])&&(l=(c<3?o(l):c>3?o(e,t,l):o(e,t))||l);return c>3&&l&&Object.defineProperty(e,t,l),l},c=function(){function ExLayoutComponent(){this.page={previous:{name:"更新日志",link:"/guide/log"},next:{name:"Button 按钮",link:"/basic/button"}}}return ExLayoutComponent.prototype.ngOnInit=function(){},ExLayoutComponent=o([Object(i.o)({selector:"ex-layout",template:t(897),styles:[t(898)],encapsulation:i._19.None})],ExLayoutComponent)}()},890:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(3),o=t(54),c=t(872),l=t(873),d=t(874),r=t(875),p=this&&this.__decorate||function(n,e,t,i){var o,c=arguments.length,l=c<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(n,e,t,i);else for(var d=n.length-1;d>=0;d--)(o=n[d])&&(l=(c<3?o(l):c>3?o(e,t,l):o(e,t))||l);return c>3&&l&&Object.defineProperty(e,t,l),l},s=[{path:"",component:c.a,children:[{path:"button",component:l.a},{path:"icon",component:d.a},{path:"layout",component:r.a}]}],a=function(){function BasicRoutingModule(){}return BasicRoutingModule=p([Object(i.M)({imports:[o.c.forChild(s)],exports:[o.c]})],BasicRoutingModule)}()},891:function(n,e){n.exports="<router-outlet></router-outlet>\n"},892:function(n,e){n.exports=""},893:function(n,e){n.exports='<h2>button</h2>\n\n<el-button [type]="\'success\'" [loading]="false" (onClick)="clickHandler()">test</el-button>\n\n<el-button-group>\n  <el-button [type]="\'info\'" [loading]="false" (onClick)="clickHandler()">next</el-button>\n  <el-button [type]="\'info\'" [loading]="false" (onClick)="clickHandler()">pre</el-button>\n</el-button-group>\n'},894:function(n,e){n.exports=""},895:function(n,e){n.exports="<h2>icon</h2>\n\n<i [class]=\"'el-icon-document'\"></i>\n"},896:function(n,e){n.exports=""},897:function(n,e){n.exports='<h2>Layout 布局 </h2>\n<p>这是一个 <a href="https://angular.cn/guide/attribute-directives" target="_blank">属性型指令</a>，它可以被用在任何元素上。</p>\n<p>通过基础的 24 分栏，迅速简便地创建布局。</p>\n\n<h3>基础布局</h3>\n<p>使用单一分栏创建基础的栅格布局。</p>\n\n<ex-demo link="2" notes="<code>el-row</code> 与 <code>el-col</code> 可以被轻易的运用在任何元素上，这些指令使元素具备额外的能力。">\n  <div el-row>\n    <div el-col span="24"><div class="grid-content bg-purple-dark"></div></div>\n  </div>\n  <div el-row>\n    <div el-col span="12"><div class="grid-content bg-purple"></div></div>\n    <div el-col span="12"><div class="grid-content bg-purple-light"></div></div>\n  </div>\n  <div el-row>\n    <div el-col span="8"><div class="grid-content bg-purple"></div></div>\n    <div el-col span="8"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col span="8"><div class="grid-content bg-purple"></div></div>\n  </div>\n  <div el-row>\n    <div el-col span="6"><div class="grid-content bg-purple"></div></div>\n    <div el-col span="6"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col span="6"><div class="grid-content bg-purple"></div></div>\n    <div el-col span="6"><div class="grid-content bg-purple-light"></div></div>\n  </div>\n  <div el-row>\n    <div el-col span="4"><div class="grid-content bg-purple"></div></div>\n    <div el-col span="4"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col span="4"><div class="grid-content bg-purple"></div></div>\n    <div el-col span="4"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col span="4"><div class="grid-content bg-purple"></div></div>\n    <div el-col span="4"><div class="grid-content bg-purple-light"></div></div>\n  </div>\n</ex-demo>\n\n<h3>分栏间隔</h3>\n<p>分栏之间存在间隔。</p>\n<ex-demo link="2" notes="当属性的值固定时，也可以直接传入模板字符串。 如 <code>gutter=&quot;20&quot;</code>">\n  <div el-row gutter="20">\n    <div el-col span="6">\n      <div class="grid-content bg-purple"></div>\n    </div>\n    <div el-col span="6">\n      <div class="grid-content bg-purple"></div>\n    </div>\n    <div el-col span="6">\n      <div class="grid-content bg-purple"></div>\n    </div>\n    <div el-col span="6">\n      <div class="grid-content bg-purple"></div>\n    </div>\n  </div>\n</ex-demo>\n\n<h3>混合布局</h3>\n<p>通过基础的 1/24 分栏任意扩展组合形成较为复杂的混合布局。</p>\n<ex-demo link="2">\n  <div el-row gutter="20">\n    <div el-col [span]="16"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="8"><div class="grid-content bg-purple"></div></div>\n  </div>\n  <div el-row :gutter="20">\n    <div el-col [span]="8"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="8"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="4"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="4"><div class="grid-content bg-purple"></div></div>\n  </div>\n  <div el-row :gutter="20">\n    <div el-col [span]="4"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="16"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="4"><div class="grid-content bg-purple"></div></div>\n  </div>\n</ex-demo>\n\n<h3>对齐方式</h3>\n<ex-demo link="2" notes="将 <code>type</code> 属性赋值为 \'flex\'，可以启用 flex 布局，并可通过 <code>justify</code> 属性来指定 start, center, end, space-between, space-around 其中的值来定义子元素的排版方式。">\n  <div el-row type="flex" class="row-bg">\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n  </div>\n  <div el-row type="flex" class="row-bg" justify="center">\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n  </div>\n  <div el-row type="flex" class="row-bg" justify="end">\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n  </div>\n  <div el-row type="flex" class="row-bg" justify="space-between">\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n  </div>\n  <div el-row type="flex" class="row-bg" justify="space-around">\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple-light"></div></div>\n    <div el-col [span]="6"><div class="grid-content bg-purple"></div></div>\n  </div>\n</ex-demo>\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n'},898:function(n,e){n.exports=".el-row {\n  margin-bottom: 20px; }\n  .el-row:last-child {\n    margin-bottom: 0; }\n\n.el-col {\n  border-radius: 4px; }\n\n.bg-purple-dark {\n  background: #99a9bf; }\n\n.bg-purple {\n  background: #d3dce6; }\n\n.bg-purple-light {\n  background: #e5e9f2; }\n\n.grid-content {\n  border-radius: 4px;\n  min-height: 36px; }\n\n.row-bg {\n  padding: 10px 0;\n  background-color: #f9fafc; }\n"}});