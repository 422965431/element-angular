webpackJsonp([0],{892:function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),o.d(n,"FormModule",function(){return h});var t=o(12),l=o(2),c=o(56),d=o(938),i=o(96),a=o(210),r=o(903),u=o(905),p=o(904),m=o(906),b=o(907),s=o(908),x=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},h=function(){function FormModule(){}return FormModule=x([Object(l.M)({declarations:[r.a,u.a,p.a,m.a,b.a,s.a],imports:[t.b,c.a,d.a,i.a,a.a],exports:[r.a],providers:[]})],FormModule)}()},903:function(e,n,o){"use strict";o.d(n,"a",function(){return d});var t=o(2),l=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},c=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},d=function(){function ExFormMainComponent(){}return ExFormMainComponent.prototype.ngOnInit=function(){},ExFormMainComponent=l([Object(t.o)({selector:"ex-form-main",template:o(939),styles:[o(940)]}),c("design:paramtypes",[])],ExFormMainComponent)}()},904:function(e,n,o){"use strict";o.d(n,"a",function(){return d});var t=o(2),l=o(941),c=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},d=function(){function ExCheckboxComponent(){this.code=l.a,this.page={previous:{name:"Radio 单选框",link:"/form/radio"},next:{name:"Input 输入框",link:"/form/input"}}}return ExCheckboxComponent.prototype.ngOnInit=function(){},ExCheckboxComponent=c([Object(t.o)({selector:"ex-checkbox",template:o(942),styles:[o(943)]})],ExCheckboxComponent)}()},905:function(e,n,o){"use strict";o.d(n,"a",function(){return d});var t=o(2),l=o(944),c=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},d=function(){function ExRadioComponent(){this.code=l.a,this.page={previous:{name:"Button 按钮",link:"/form/radio"},next:{name:"Checkbox 多选框",link:"/form/checkbox"}}}return ExRadioComponent.prototype.ngOnInit=function(){},ExRadioComponent=c([Object(t.o)({selector:"ex-radio",template:o(945),styles:[o(946)]})],ExRadioComponent)}()},906:function(e,n,o){"use strict";o.d(n,"a",function(){return d});var t=o(2),l=o(947),c=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},d=function(){function ExInputComponent(){this.code=l.a,this.page={previous:{name:"Check 多选框",link:"/form/checkbox"},next:{name:"InputNumber 计数器",link:"/form/input-number"}}}return ExInputComponent.prototype.ngOnInit=function(){},ExInputComponent=c([Object(t.o)({selector:"ex-input",template:o(948),styles:[o(949)],encapsulation:t._19.None})],ExInputComponent)}()},907:function(e,n,o){"use strict";o.d(n,"a",function(){return d});var t=o(2),l=o(950),c=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},d=function(){function ExInputNumberComponent(){this.code=l.a,this.page={previous:{name:"Input 输入框",link:"/form/input"},next:{name:"Select 选择器",link:"/form/input"}}}return ExInputNumberComponent.prototype.ngOnInit=function(){},ExInputNumberComponent=c([Object(t.o)({selector:"ex-input-number",template:o(951),styles:[o(952)],encapsulation:t._19.None})],ExInputNumberComponent)}()},908:function(e,n,o){"use strict";o.d(n,"a",function(){return d});var t=o(2),l=o(953),c=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},d=function(){function ExSelectComponent(){this.code=l.a,this.page={previous:{name:"InputNumber 计数器",link:"/form/input-number"},next:{name:"Select 选择器",link:"/form/select"}}}return ExSelectComponent.prototype.ngOnInit=function(){},ExSelectComponent=c([Object(t.o)({selector:"ex-select",template:o(954),styles:[o(955)],encapsulation:t._19.None})],ExSelectComponent)}()},938:function(e,n,o){"use strict";o.d(n,"a",function(){return b});var t=o(2),l=o(43),c=o(903),d=o(904),i=o(905),a=o(906),r=o(907),u=o(908),p=this&&this.__decorate||function(e,n,o,t){var l,c=arguments.length,d=c<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(e,n,o,t);else for(var i=e.length-1;i>=0;i--)(l=e[i])&&(d=(c<3?l(d):c>3?l(n,o,d):l(n,o))||d);return c>3&&d&&Object.defineProperty(n,o,d),d},m=[{path:"",component:c.a,children:[{path:"radio",component:i.a},{path:"checkbox",component:d.a},{path:"input",component:a.a},{path:"input-number",component:r.a},{path:"select",component:u.a}]}],b=function(){function FormRoutingModule(){}return FormRoutingModule=p([Object(t.M)({imports:[l.d.forChild(m)],exports:[l.d]})],FormRoutingModule)}()},939:function(e,n){e.exports="<router-outlet></router-outlet>\n"},940:function(e,n){e.exports=""},941:function(e,n,o){"use strict";n.a=["\n\x3c!-- 'checked' 为 true 或 false --\x3e\n<el-checkbox [(model)]=\"checked\" >备选项</el-checkbox>\n\n",'\n\n<el-checkbox [model]="checked1" [disabled]="true">备选项1</el-checkbox>\n<el-checkbox [model]="checked2" [disabled]="true">备选项2</el-checkbox>\n\n','\n\n\x3c!--当组件中无值时，label 属性的值也会用于显示--\x3e\n<el-checkbox-group [model]="[\'复选框 B\', \'选中且禁用\']">\n  <el-checkbox label="复选框 A"></el-checkbox>\n  <el-checkbox label="复选框 B">复选框 F</el-checkbox>\n  <el-checkbox label="复选框 C"></el-checkbox>\n  <el-checkbox label="禁用" [disabled]="true"></el-checkbox>\n  <el-checkbox label="选中且禁用" [disabled]="true"></el-checkbox>\n</el-checkbox-group>\n\n','\n\x3c!--min 与 [min] 并不是等价的，具体请参见 Angular 官方文档--\x3e\n<el-checkbox-group [model]="[\'Java\', \'TypeScript\']" [min]="1" max="2">\n  <el-checkbox label="Java"></el-checkbox>\n  <el-checkbox label=".NET">复选框 F</el-checkbox>\n  <el-checkbox label="C++"></el-checkbox>\n  <el-checkbox label="JavaScript" [disabled]="true"></el-checkbox>\n  <el-checkbox label="TypeScript" [disabled]="true"></el-checkbox>\n</el-checkbox-group>\n\n',"\n<div style=\"margin: 15px 0;\"></div>\n<el-checkbox-group [model]=\"['Java', 'TypeScript', 'Swift']\">\n  <el-checkbox-button *ngFor=\"let city of ['Hello', 'TypeScript', 'CSS']\"\n    [label]=\"city\"></el-checkbox-button>\n</el-checkbox-group>\n\n<div style=\"margin: 15px 0;\"></div>\n<el-checkbox-group [model]=\"['Hegel', 'Aristotle', 'Dewey']\" size=\"small\">\n  <el-checkbox-button *ngFor=\"let man of ['Hegel', 'Aristotle', 'Dewey']\"\n    [label]=\"man\" [disabled]=\"man === 'Aristotle'\">{{man}}</el-checkbox-button>\n</el-checkbox-group>\n"]},942:function(e,n){e.exports='<h2>Checkbox 多选框</h2>\n<p>一组备选项中进行多选</p>\n\n<h3>基础用法</h3>\n<p>单独使用可以表示两种状态之间的切换，写在标签中的内容为 checkbox 按钮后的介绍。</p>\n<ex-demo link="2" [code]="code[0]" notes="在组件中定义 <code>model</code> 绑定变量，\n单一使用组件时，默认绑定变量的值会是 <code>Boolean</code>，选中为 <code>true</code>">\n</ex-demo>\n\n<h3>禁用状态</h3>\n<p>多选框不可用状态。</p>\n<ex-demo link="2" [code]="code[1]" notes="设置 <code>disabled</code> 属性即可">\n</ex-demo>\n\n<h3>多选框组</h3>\n<p>适用于多个勾选框绑定到同一个数组的情景，通过是否勾选来表示这一组选项中选中的项。</p>\n<ex-demo link="2" [code]="code[2]" notes="<code>label</code> 与数组中的元素值相对应，\n如果存在指定的值则为选中状态，否则为不选中。">\n</ex-demo>\n\n<h3>可选项目数量的限制</h3>\n<p>使用 <code>min</code> 和 <code>max</code> 属性能够限制可以被勾选的项目的数量。</p>\n<ex-demo link="2" [code]="code[3]">\n</ex-demo>\n\n<h3>按钮样式</h3>\n<p>按钮样式的多选组合。</p>\n<ex-demo link="2" [code]="code[4]" notes="组件还提供了 <code>size</code> 属性，\n支持 <code>large</code> 和 <code>small</code> 两种。">\n</ex-demo>\n\n<ex-document doc="checkbox"></ex-document>\n<ex-document doc="checkbox-group"></ex-document>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n'},943:function(e,n){e.exports=""},944:function(e,n,o){"use strict";n.a=['\n\x3c!--绑定的 model 与 label 值相同时就会被选中--\x3e\n<el-radio class="radio" [(model)]="radio" label="备选1">备选项</el-radio>\n\n<el-radio class="radio" [(model)]="radio" label="备选2"></el-radio>\n\n<el-radio class="radio" [(model)]="radio" label="备选3">备选3</el-radio>\n\n','\n\x3c!--你可以拆分 model 达到不同的用途：--\x3e\n\x3c!--单独使用 \'[]\' 来标记输入组件的值，甚至可以不声明变量--\x3e\n\x3c!--单独使用 \'(modelChange)\' 来获取组件返回的变化--\x3e\n<el-radio [disabled]="true" [model]="\'element\'" label="element">备选项</el-radio>\n\n<el-radio [disabled]="true" [(model)]="element2" label="element">备选项</el-radio>\n\n','\n<el-radio-group [model]="\'3\'">\n  <el-radio label="3">备选项</el-radio>\n  <el-radio label="6">备选项</el-radio>\n  <el-radio label="9">备选项</el-radio>\n</el-radio-group>\n','\n<el-radio-group [model]="\'上海\'">\n  <el-radio-button label="上海"></el-radio-button>\n  <el-radio-button label="北京"></el-radio-button>\n  <el-radio-button label="广州"></el-radio-button>\n  <el-radio-button label="深圳"></el-radio-button>\n</el-radio-group>\n<div style="margin: 15px 0;"></div>\n\n<el-radio-group [model]="\'Angular\'">\n  <el-radio-button label="Angular"></el-radio-button>\n  <el-radio-button label="React"></el-radio-button>\n  <el-radio-button label="Bootstrap" :disabled="true"></el-radio-button>\n  <el-radio-button label="Vue"></el-radio-button>\n</el-radio-group>\n<div style="margin: 15px 0;"></div>\n\n<el-radio-group [model]="\'北京\'" :disabled="true">\n  <el-radio-button label="上海"></el-radio-button>\n  <el-radio-button label="北京"></el-radio-button>\n  <el-radio-button label="广州"></el-radio-button>\n  <el-radio-button label="深圳"></el-radio-button>\n</el-radio-group>\n']},945:function(e,n){e.exports='<h2>Radio 单选框</h2>\n<p>在一组备选项中进行单选</p>\n\n<h3>基础用法</h3>\n<p>由于选项默认可见，不宜过多，若选项过多，建议使用 Select 选择器。</p>\n<ex-demo link="2" [code]="code[0]" notes="要使用 Radio 组件，只需要设置 <code>[(model)]</code>绑定变量。\n如果组件中未包含内容，则会优先显示 <code>[label]</code> 中的内容。">\n</ex-demo>\n\n<h3>禁用状态</h3>\n<p>单选框不可用的状态。</p>\n<ex-demo link="2" [code]="code[1]" notes="选中的条件是绑定的变量值等于`label`中的值。只要在<code>el-radio</code>元素中设置\n<code>disabled</code>属性即可，它接受一个<code>boolean</code>，<code>true</code>为禁用。">\n</ex-demo>\n\n<h3>单选框组</h3>\n<p>适用于在多个互斥的选项中选择的场景</p>\n<ex-demo link="2" [code]="code[2]" notes="在 <code>el-radio-group</code> 中绑定 <code>model</code>，\n在el-radio中设置好label即可，无需再给每一个el-radio绑定变量 (会被忽略)。">\n</ex-demo>\n\n<h3>按钮样式</h3>\n<p>按钮样式的单选组合。</p>\n<ex-demo link="2" [code]="code[3]" notes="只需要把 <code>el-radio</code> 元素换成\n<code>el-radio-button</code> 元素即可，此组件还提供了 <code>size</code> 属性，支持\n<code>large</code> 和 <code>small</code> 两种">\n</ex-demo>\n\n<ex-document doc="radio"></ex-document>\n<ex-document doc="radio-group"></ex-document>\n<ex-document doc="radio-button"></ex-document>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n'},946:function(e,n){e.exports=""},947:function(e,n,o){"use strict";n.a=['\n\x3c!--当设置 value 初始值属性后，会覆盖 placeholder--\x3e\n\x3c!--你可以通过 [(model)] 进行双向绑定--\x3e\n<el-input [model]="input" placeholder="请输入内容"></el-input>\n\n','\n\n<el-input placeholder="请输入内容"\n  [model]="input1"\n  [disabled]="true">\n</el-input>\n\n','\n\n\x3c!--你可以使用 (icon-click)=Function 来得到图标点击的事件--\x3e\n<el-input placeholder="请选择日期"\n  icon="search"\n  [model]="input2">\n</el-input>\n\n','\n<el-input type="textarea"\n  [rows]="2"\n  placeholder="请输入内容"\n  [model]="textarea">\n</el-input>\n','\n<el-input type="textarea"\n  autosize\n  placeholder="固定高度文本域"\n  [model]="textarea2">\n</el-input>\n\n<div style="margin: 20px 0;"></div>\n\n<el-input type="textarea"\n  [autosize]="{ minRows: 2, maxRows: 4}"\n  placeholder="自动调整高度 { minRows: 2, maxRows: 4 }"\n  [model]="textarea3">\n</el-input>\n','\n<div>\n  <el-input placeholder="请输入内容" [model]="input3">\n    <ng-template #prepend>\n      <span>Http://</span>\n    </ng-template>\n  </el-input>\n</div>\n\n<div style="margin-top: 15px;">\n  <el-input placeholder="请输入内容" [model]="input4">\n    <ng-template #append>\n      <span>.com</span>\n    </ng-template>\n  </el-input>\n</div>\n\n','\n<div class="demo-input-size">\n\n  <el-input size="large" placeholder="请输入内容" [model]="input6">\n  </el-input>\n  \n  <el-input placeholder="请输入内容" [model]="input7">\n  </el-input>\n  \n  <el-input size="small" placeholder="请输入内容" [model]="input8">\n  </el-input>\n  \n  <el-input size="mini" placeholder="请输入内容" [model]="input9">\n  </el-input>\n  \n</div>\n']},948:function(e,n){e.exports='<h2>Input 输入框</h2>\n<p>通过鼠标或键盘输入字符</p>\n\n<h3>基础用法</h3>\n<ex-demo link="2" [code]="code[0]">\n</ex-demo>\n\n<h3>禁用状态</h3>\n<ex-demo link="2" [code]="code[1]" notes="通过 <code>disabled</code> 属性指定是否禁用 input 组件">\n</ex-demo>\n\n<h3>带 icon 的输入框</h3>\n<p>带有图标标记输入类型</p>\n<ex-demo link="2" [code]="code[2]" notes="通过 <code>icon</code> 属性在 input 组件尾部增加显示图标">\n</ex-demo>\n\n<h3>文本域</h3>\n<p>用于输入多行文本信息，通过将 <code>type</code> 属性的值指定为 textarea。</p>\n<ex-demo link="2" [code]="code[3]" notes="文本域高度可通过 <code>rows</code> 属性控制">\n</ex-demo>\n\n<h3>可自适应文本高度的文本域</h3>\n<p>通过设置 <code>autosize</code> 属性可以使得文本域的高度能够根据文本内容自动进行调整，并且 <code>autosize</code> 还可以设定为一个对象，指定最小行数和最大行数</p>\n<ex-demo link="2" [code]="code[4]">\n</ex-demo>\n\n<h3>复合型输入框</h3>\n<p>可前置或后置元素，一般为标签或按钮</p>\n<ex-demo link="2" [code]="code[5]">\n</ex-demo>\n\n<h3>尺寸</h3>\n<ex-demo link="2" [code]="code[6]" notes="可通过 <code>size</code> 属性指定输入框的尺寸，\n除了默认的大小外，还提供了 large、small 和 mini 三种尺寸">\n</ex-demo>\n\n\n<ex-document doc="input"></ex-document>\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n'},949:function(e,n){e.exports=".demo-input.demo-zh-CN .el-select .el-input {\n  width: 110px; }\n\n.demo-input.demo-zh-CN .el-input {\n  width: 180px; }\n\n.demo-input.demo-zh-CN .el-textarea {\n  width: 414px; }\n\n.demo-input.demo-zh-CN .el-input-group {\n  width: 100%; }\n\n.demo-input.demo-zh-CN .demo-input-size .el-input {\n  vertical-align: top;\n  margin: 0 10px 10px 0; }\n\n.demo-input.demo-zh-CN .demo-autocomplete {\n  text-align: center; }\n  .demo-input.demo-zh-CN .demo-autocomplete .sub-title {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #8492a6; }\n  .demo-input.demo-zh-CN .demo-autocomplete .el-col:not(:last-child) {\n    border-right: 1px solid rgba(224, 230, 237, 0.5); }\n  .demo-input.demo-zh-CN .demo-autocomplete .el-autocomplete {\n    text-align: left; }\n\n.el-autocomplete-suggestion.my-autocomplete li {\n  line-height: normal;\n  padding: 7px auto; }\n  .el-autocomplete-suggestion.my-autocomplete li .name {\n    text-overflow: ellipsis;\n    overflow: hidden; }\n  .el-autocomplete-suggestion.my-autocomplete li .addr {\n    font-size: 12px;\n    color: #b4b4b4; }\n  .el-autocomplete-suggestion.my-autocomplete li .highlighted .addr {\n    color: #ddd; }\n"},950:function(e,n,o){"use strict";n.a=['\n\n\x3c!--你可以通过 [(model)] 进行双向绑定--\x3e\n<el-input-number [model]="5" [min]="1" [max]="10"></el-input-number>\n\n','\n\n<el-input-number [model]="1" [disabled]="true"></el-input-number>\n\n','\n\n<el-input-number [model]="10" [step]="2"></el-input-number>\n\n','\n<el-input-number size="large" [model]="1"></el-input-number>\n\n<el-input-number [model]="3"></el-input-number>\n\n<el-input-number size="small" [model]="5"></el-input-number>\n\n']},951:function(e,n){e.exports='<h2>InputNumber 计数器</h2>\n<p>仅允许输入标准的数字值，可定义范围</p>\n\n<h3>基础用法</h3>\n<ex-demo [code]="code[0]" link="2" notes="变量的初始值即为默认值">\n</ex-demo>\n\n<h3>禁用状态</h3>\n<ex-demo [code]="code[1]" link="2" notes="<code>disabled</code> 属性接受一个 <code>boolean</code>">\n</ex-demo>\n\n<h3>步数</h3>\n<p>允许定义递增递减的步数控制</p>\n<ex-demo [code]="code[2]" link="2" notes="设置 <code>step</code> 属性可以控制步长，\n接受一个 <code>number</code>">\n</ex-demo>\n\n<h3>尺寸</h3>\n<p>额外提供了 <code>large</code>、<code>small</code> 两种尺寸的数字输入框</p>\n<ex-demo [code]="code[3]" link="2">\n</ex-demo>\n\n<ex-document doc="input-number"></ex-document>\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n'},952:function(e,n){e.exports=".demo-box.demo-input-number .el-input-number + .el-input-number {\n  margin-left: 10px; }\n"},953:function(e,n,o){"use strict";n.a=["\n\x3c!--你可以通过 model 来获取每次选择的值--\x3e\n\x3c!--或者通过绑定 (modelChange)=handle 来获得每次值改变的触发--\x3e\n<el-select [(model)]=\"value\" placeholder=\"请选择\">\n  <el-option *ngFor=\"let item of [{value: '选项1',label: '黄金糕' },\n      { value: '选项2', label: '双皮奶' },\n      { value: '选项3', label: '蚵仔煎' },\n      { value: '选项4', label: '龙须面' },\n      { value: '选项5', label: '北京烤鸭' }]\"\n    [label]=\"item.label\"\n    [value]=\"item.value\">\n  </el-option>\n</el-select>\n\n","\n\n<el-select [(model)]=\"value\" placeholder=\"请选择\">\n  <el-option *ngFor=\"let item of [{value: '选项1',label: '黄金糕' },\n      { value: '选项2', label: '双皮奶' },\n      { disabled: true, value: '选项3', label: '蚵仔煎' },\n      { value: '选项4', label: '龙须面' },\n      { value: '选项5', label: '北京烤鸭' }]\"\n    [label]=\"item.label\"\n    [disabled]=\"item.disabled\"\n    [value]=\"item.value\">\n  </el-option>\n</el-select>\n\n",'\n\n<el-select [model]="\'选项2\'" [disabled]="true">\n  <el-option *ngFor="let item of [{value: \'选项1\',label: \'黄金糕\' }]"\n    [label]="item.label"\n    [value]="item.value">\n  </el-option>\n</el-select>\n\n',"\n\n<el-select [model]=\"'选项2'\">\n  <el-option *ngFor=\"let item of [{value: '选项1',label: '黄金糕' },\n      { value: '选项2', label: '双皮奶' },\n      { disabled: true, value: '选项3', label: '蚵仔煎' },\n      { value: '选项4', label: '龙须面' },\n      { value: '选项5', label: '北京烤鸭' }]\"\n    [label]=\"item.label\"\n    [value]=\"item.value\">\n  </el-option>\n</el-select>\n\n","\n\n<el-select [(model)]=\"value\" [clearable]=\"true\">\n  <el-option *ngFor=\"let item of [{value: '选项1',label: '黄金糕' },\n      { value: '选项2', label: '双皮奶' },\n      { disabled: true, value: '选项3', label: '蚵仔煎' },\n      { value: '选项4', label: '龙须面' },\n      { value: '选项5', label: '北京烤鸭' }]\"\n    [label]=\"item.label\"\n    [value]=\"item.value\">\n  </el-option>\n</el-select>\n\n"]},954:function(e,n){e.exports='<h2>Select 选择器</h2>\n<p>当选项过多时，使用下拉菜单展示并选择内容。</p>\n\n<h3>基础用法</h3>\n<p>适用广泛的基础单选</p>\n<ex-demo link="2" [code]="code[0]" notes="<code>el-option</code> 的属性\n<code>label</code>和<code>value</code>是必填的。">\n</ex-demo>\n\n<h3>有禁用选项</h3>\n<ex-demo link="2" [code]="code[1]" notes="在<code>el-option</code>中，设定\n<code>disabled</code>值为 true，即可禁用该选项。">\n</ex-demo>\n\n<h3>禁用状态</h3>\n<p>选择器不可用状态</p>\n<ex-demo link="2" [code]="code[2]" notes="在<code>el-option</code>中，设定\n<code>disabled</code>值为 true，即可禁用该选项。">\n</ex-demo>\n\n<h3>默认选中</h3>\n<p>初始状态时默认选中值</p>\n<ex-demo link="2" [code]="code[3]" notes="在<code>el-select</code>中，设定\nmodel 初始值等于需要选中项的 value 即可。">\n</ex-demo>\n\n<h3>可清空单选</h3>\n<p>包含清空按钮，可将选择器清空为初始状态</p>\n<ex-demo link="2" [code]="code[4]" notes="在<code>el-select</code>中，设定\n<code>clearable</code>值为 true，则可将选择器清空。">\n</ex-demo>\n\n\n<ex-document doc="select"></ex-document>\n<ex-document doc="select-option"></ex-document>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n'},955:function(e,n){e.exports=""}});